worker_processes 1;

events {
    worker_connections 1024;
}

http{
    include       mime.types;
    default_type  application/octet-stream;

    sendfile      on;
    keepalive_timeout     65;

    lua_package_path "/ach/package/lua/?.lua;;";
    lua_package_cpath "/ach/package/?.so;;";

    init_by_lua_block {
            local ach = require "ach"
            local ch  = require "ch"

            local servers = {
                "192.168.136.5:8080",
                "192.168.136.6:8080"
            }

            local my_ach = ach:init(servers)
            local my_ch = ch:init(servers)

            package.loaded.my_ach = my_ach
            package.loaded.my_ch = my_ch
    }

    upstream backend_ach{
        server 0.0.0.1;
        balancer_by_lua_block{
            local b = require "ngx.balancer"
            local ach = package.loaded.my_ach
            local id = ngx.var.arg_id
            local size = ngx.var.arg_size
            local server = ach:request(id, size)
            assert(b.set_current_peer(server))
        }
    }

    upstream backend_ch{
        server 0.0.0.1;
        balancer_by_lua_block{
            local b = require "ngx.balancer"
            local ch = package.loaded.my_ch
            local id = ngx.var.arg_id
            local size = ngx.var.arg_size
            local server = ch:request(id, size)
            assert(b.set_current_peer(server))
        }
    }

    server {
        listen 8080;
        server_name localhost;
        default_type text/html;
        location / {
            echo "hello!";
        }
        location /ach/ {
            proxy_pass http://backend_ach;
        }

        location /ch/ {
            proxy_pass http://backend_ch;
        }
    }
}
